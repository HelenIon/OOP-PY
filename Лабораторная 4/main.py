import random

if __name__ == "__main__":
    class Character:
        """
            Класс описывает модель персонажа. У него есть имя, раса, и шанс победы в драке.
        """

        def __init__(self, name: str, race: str):
            """
                Создание и подготовка к работе объекта "Персонаж"
                :param name: Имя персонажа
                :param race: Раса персонажа
                :param win_chance: Шанс победы персонажа при атаке

                Примеры:
                >>> character = Character("Олег", "человек")  # инициализация экземпляра класса
            """
            self._name = name  # Персонаж не может менять имя.
            self._race = race  # Персонаж не может менять расу.
            self._win_chance = 20  # Персонаж не может менят шанс победы.

        def __str__(self) -> str:
            return f"Меня зовут {self._name} и я {self._race}. " \
                   f"Мама ничему меня не научила ;("

        def __repr__(self) -> str:
            return f"{self.__class__.__name__}(_name={self._race!r}, _race={self._race!r})"

        @property
        def name(self) -> str:
            """
                Геттер имени персонажа. Возвращает значение поля name.

                Пример:
                >>> character = Character("Олег", "человек")  # инициализация экземпляра класса
                >>> character.name
                Олег
            """
            return self._name

        @property
        def race(self) -> str:
            """
                Возврат значения поля race.

                Пример:
                >>> character = Character("Олег", "человек")  # инициализация экземпляра класса
                >>> character.race
                человек
            """
            return self._race

        def attack(self, target: str) -> None:
            """
                Метод атаки персонажа по цели. В зависимости шанса победы персонажа,
                может быть несколько исходов атаки, как успешная, так и неудачная.

                :param target: Цель, подвергаемая нападению

                Примеры:
                >>> character = Character("Олег", "человек")
                >>> character.attack("Большая муха")
                Олег беспорядочно машет руками и ногами в сторону Большая муха
                Олег получил по лицу от Большая муха, что неудивительно, ведь он ничего не умеет"

                >>> character = Character("Олег", "человек")
                >>> character.attack("Накаченный орк")
                Олег беспорядочно машет руками и ногами в сторону Накаченный орк
                Накаченный орк умирает от смеха, Олег празднует победу. Нельзя недооценивать силу глупости!
            """
            chance = random.randint(0, 100)

            print(f"{self._name} беспорядочно машет руками и ногами в сторону {target}")
            if chance > self._win_chance:
                print(f"{self._name} получил по лицу от {target}, что неудивительно, ведь он ничего не умеет")
            else:
                print(f"{target} умирает от смеха, {self._name} празднует победу. Нельзя недооценивать силу глупости!")


    class Thief(Character):
        """
            Класс описывает модель вора. Он является дочерним по отношению к классу Character.
            Имеет свойство weapon, определяющее его оружие в бою.
        """

        def __init__(self, name: str, race: str, weapon: str = None):
            """
                Создание и подготовка к работе объекта "Вор".
                По-умолчанию имеет оружие dagger, при создании экземпляра класса оружие
                может быть задано пользователем.
                Конструктор перегружен в связи с наличием у вора нового поля weapon и
                увеличенным значением шанса атаки.

                :param name: Имя персонажа
                :param race: Раса персонажа
                :param weapon: Оружие персонажа
                :param win_chance: Шанс победы персонажа при атаке

                Примеры:
                >>> thief_with_dagger = Thief("Анатолий", "эльф")  # инициализация экземпляра класса с оружием по-умолчанию.
                >>> thief_with_user_weapon = Thief("Джони", "гном", "маленький кинжал")  # инициализация экземпляра класса с пользовательским оружием.
            """
            super().__init__(name, race)
            if weapon is None:
                self._weapon = "dagger"  # оружие вора может быть заменено только при особых обстоятельствах.
            else:
                if not isinstance(weapon, str):
                    raise ValueError("Оружие должно иметь строковое значение")
                else:
                    self._weapon = weapon
            self._win_chance = 70

        def __str__(self) -> str:
            # Метод перегружен в связи с наличием у вора нового поля weapon

            return f"Меня зовут {self._name} и я {self._race}. " \
                   f"Я могу украсть сладкий пирог и ткнуть в кого-нибудь свой {self._weapon}"

        def __repr__(self) -> str:
            # Метод перегружен в связи с наличием у вора нового поля weapon

            return f"{self.__class__.__name__}(_name={self._race!r}, _race={self._race!r}), _weapon={self._weapon}"

        @property
        def weapon(self) -> str:
            """
            Геттер для поля weapon.

             Пример:
            >>> thief = Thief("Анатолий", "эльф")  # инициализация экземпляра класса
            >>> thief.weapon   # выводим текущее значение оружия
            dagger
            """
            return self._weapon

        @weapon.setter
        def weapon(self, weapon: str) -> None:
            """
            Сеттер для поля weapon. Необходим на случай если вор получит новое оружие,
            то есть если будет необходимость в замене старого оружия.

             Пример:
            >>> thief = Thief("Анатолий", "эльф")  # инициализация экземпляра класса
            >>> thief.weapon("дымящийся клинок")   # задаем новон значение оружия
            >>> thief.weapon   # выводим текущее значение оружия
            дымящийся клинок
            """
            self._weapon = weapon

        def attack(self, target: str) -> None:
            """
                Метод атаки вора по цели. В зависимости шанса победы вора,
                может быть несколько исходов атаки, как успешная, так и неудачная.
                Метод перегружен в связи с наличием у вора оружия и другим стилем ведения боя.

                :param target: Цель, подвергаемая нападению

                Примеры:
                >>> thief = Thief("Анатолий", "эльф", "тесак")
                >>> character.attack("Девочка с конфетой")
                Сверкая взглядом в сторону Девочка с конфетой, вор по имени Анатолий достает из-за пазухи тесак.
                Попытавшись напать на Девочка с конфетой со спины, Анатолий спотыкается и роняет тесак. Девочка с конфетой теряет терпение, а Анатолий зубы.

                >>> thief = Thief("Анатолий", "эльф")
                >>> character.attack("Грозная горилла")
                Сверкая взглядом в сторону Грозная горилла, вор по имени Анатолий достает из-за пазухи dagger.
                dagger в печень, никто не вечен. Вот и Грозная горилла не вечен. Анатолий забирает все его пожитки и уходит.
            """
            chance = random.randint(0, 100)

            print(
                f"Сверкая взглядом в сторону {target}, вор по имени {self._name} достает из-за пазухи {self._weapon}.")
            if chance > self._win_chance:
                print(f"Попытавшись напать на {target} со спины, {self.name} спотыкается и роняет {self._weapon}. "
                      f"{target} теряет терпение, а {self._name} зубы.")
            else:
                print(f"{self._weapon} в печень, никто не вечен. Вот и {target} не вечен. {self._name} забирает все "
                      f"его пожитки и уходит.")


    pass
